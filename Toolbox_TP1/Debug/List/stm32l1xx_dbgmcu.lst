###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        24/Nov/2014  11:34:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_dbgmcu.c
#    Command line =  
#        "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_dbgmcu.c"
#        -D USE_STDPERIPH_DRIVER -D STM32L1XX_XL -lcN "D:\Mes
#        Documents\ST32\Toolbox_TP1\Debug\List\" -o "D:\Mes
#        Documents\ST32\Toolbox_TP1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\src\"
#        -I "D:\Mes Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Include\" -I
#        "D:\Mes Documents\ST32\Toolbox_TP1\" -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\stm32l1xx_nucleo\" -Ol
#    List file    =  
#        D:\Mes Documents\ST32\Toolbox_TP1\Debug\List\stm32l1xx_dbgmcu.lst
#    Object file  =  
#        D:\Mes Documents\ST32\Toolbox_TP1\Debug\Obj\stm32l1xx_dbgmcu.o
#
###############################################################################

D:\Mes Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_dbgmcu.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_dbgmcu.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    31-January-2014
      7            * @brief   This file provides all the DBGMCU firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "stm32l1xx_dbgmcu.h"
     30          
     31          /** @addtogroup STM32L1xx_StdPeriph_Driver
     32            * @{
     33            */
     34          
     35          /** @defgroup DBGMCU 
     36            * @brief DBGMCU driver modules
     37            * @{
     38            */ 
     39          
     40          /* Private typedef -----------------------------------------------------------*/
     41          /* Private define ------------------------------------------------------------*/
     42          #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
     43          
     44          /* Private macro -------------------------------------------------------------*/
     45          /* Private variables ---------------------------------------------------------*/
     46          /* Private function prototypes -----------------------------------------------*/
     47          /* Private functions ---------------------------------------------------------*/
     48          
     49          /** @defgroup DBGMCU_Private_Functions
     50            * @{
     51            */
     52          
     53          /**
     54            * @brief  Returns the device revision identifier.
     55            * @param  None
     56            * @retval Device revision identifier
     57            */
     58          uint32_t DBGMCU_GetREVID(void)
     59          {
     60             return(DBGMCU->IDCODE >> 16);
     61          }
     62          
     63          /**
     64            * @brief  Returns the device identifier.
     65            * @param  None
     66            * @retval Device identifier
     67            */
     68          uint32_t DBGMCU_GetDEVID(void)
     69          {
     70             return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
     71          }
     72          
     73          /**
     74            * @brief  Configures low power mode behavior when the MCU is in Debug mode.
     75            * @param  DBGMCU_Periph: specifies the low power mode.
     76            *   This parameter can be any combination of the following values:
     77            *     @arg DBGMCU_SLEEP: Keep debugger connection during SLEEP mode
     78            *     @arg DBGMCU_STOP: Keep debugger connection during STOP mode
     79            *     @arg DBGMCU_STANDBY: Keep debugger connection during STANDBY mode
     80            * @param  NewState: new state of the specified low power mode in Debug mode.
     81            *   This parameter can be: ENABLE or DISABLE.
     82            * @retval None
     83            */
     84          void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
     85          {
     86            /* Check the parameters */
     87            assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
     88            assert_param(IS_FUNCTIONAL_STATE(NewState));
     89          
     90            if (NewState != DISABLE)
     91            {
     92              DBGMCU->CR |= DBGMCU_Periph;
     93            }
     94            else
     95            {
     96              DBGMCU->CR &= ~DBGMCU_Periph;
     97            }
     98          }
     99          
    100          
    101          /**
    102            * @brief  Configures APB1 peripheral behavior when the MCU is in Debug mode.
    103            * @param  DBGMCU_Periph: specifies the APB1 peripheral.
    104            *   This parameter can be any combination of the following values:
    105            *     @arg DBGMCU_TIM2_STOP: TIM2 counter stopped when Core is halted
    106            *     @arg DBGMCU_TIM3_STOP: TIM3 counter stopped when Core is halted
    107            *     @arg DBGMCU_TIM4_STOP: TIM4 counter stopped when Core is halted
    108            *     @arg DBGMCU_TIM5_STOP: TIM5 counter stopped when Core is halted  
    109            *     @arg DBGMCU_TIM6_STOP: TIM6 counter stopped when Core is halted
    110            *     @arg DBGMCU_TIM7_STOP: TIM7 counter stopped when Core is halted
    111            *     @arg DBGMCU_RTC_STOP:
    112            *       + On STM32L1xx Medium-density devices: RTC Wakeup counter stopped when 
    113            *         Core is halted.
    114            *       + On STM32L1xx High-density and Medium-density Plus devices: RTC Calendar 
    115            *         and Wakeup counter stopped when Core is halted.
    116            *     @arg DBGMCU_WWDG_STOP: Debug WWDG stopped when Core is halted
    117            *     @arg DBGMCU_IWDG_STOP: Debug IWDG stopped when Core is halted
    118            *     @arg DBGMCU_I2C1_SMBUS_TIMEOUT: I2C1 SMBUS timeout mode stopped when Core is 
    119            *                                     halted
    120            *     @arg DBGMCU_I2C2_SMBUS_TIMEOUT: I2C2 SMBUS timeout mode stopped when Core is 
    121            *                                     halted
    122            * @param  NewState: new state of the specified APB1 peripheral in Debug mode.
    123            *   This parameter can be: ENABLE or DISABLE.
    124            * @retval None
    125            */
    126          void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
    127          {
    128            /* Check the parameters */
    129            assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
    130            assert_param(IS_FUNCTIONAL_STATE(NewState));
    131          
    132            if (NewState != DISABLE)
    133            {
    134              DBGMCU->APB1FZ |= DBGMCU_Periph;
    135            }
    136            else
    137            {
    138              DBGMCU->APB1FZ &= ~DBGMCU_Periph;
    139            }
    140          }
    141          
    142          /**
    143            * @brief  Configures APB2 peripheral behavior when the MCU is in Debug mode.
    144            * @param  DBGMCU_Periph: specifies the APB2 peripheral.
    145            *   This parameter can be any combination of the following values:
    146            *     @arg DBGMCU_TIM9_STOP: TIM9 counter stopped when Core is halted
    147            *     @arg DBGMCU_TIM10_STOP: TIM10 counter stopped when Core is halted
    148            *     @arg DBGMCU_TIM11_STOP: TIM11 counter stopped when Core is halted
    149            * @param  NewState: new state of the specified APB2 peripheral in Debug mode.
    150            *   This parameter can be: ENABLE or DISABLE.
    151            * @retval None
    152            */
    153          void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
    154          {
    155            /* Check the parameters */
    156            assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
    157            assert_param(IS_FUNCTIONAL_STATE(NewState));
    158          
    159            if (NewState != DISABLE)
    160            {
    161              DBGMCU->APB2FZ |= DBGMCU_Periph;
    162            }
    163            else
    164            {
    165              DBGMCU->APB2FZ &= ~DBGMCU_Periph;
    166            }
    167          }
    168          
    169          /**
    170            * @}
    171            */
    172          
    173          /**
    174            * @}
    175            */
    176          
    177          /**
    178            * @}
    179            */
    180          
    181          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DBGMCU_APB1PeriphConfig
       0   DBGMCU_APB2PeriphConfig
       0   DBGMCU_Config
       0   DBGMCU_GetDEVID
       0   DBGMCU_GetREVID


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      32  DBGMCU_APB1PeriphConfig
      32  DBGMCU_APB2PeriphConfig
      32  DBGMCU_Config
      10  DBGMCU_GetDEVID
       8  DBGMCU_GetREVID

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none
