###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        24/Nov/2014  11:34:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c
#    Command line =  
#        "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c"
#        -D USE_STDPERIPH_DRIVER -D STM32L1XX_XL -lcN "D:\Mes
#        Documents\ST32\Toolbox_TP1\Debug\List\" -o "D:\Mes
#        Documents\ST32\Toolbox_TP1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\STM32L1xx_StdPeriph_Driver\src\"
#        -I "D:\Mes Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Include\" -I
#        "D:\Mes Documents\ST32\Toolbox_TP1\" -I "D:\Mes
#        Documents\ST32\Toolbox_TP1\Libraries\stm32l1xx_nucleo\" -Ol
#    List file    =  
#        D:\Mes Documents\ST32\Toolbox_TP1\Debug\List\system_stm32l1xx.lst
#    Object file  =  
#        D:\Mes Documents\ST32\Toolbox_TP1\Debug\Obj\system_stm32l1xx.o
#
###############################################################################

D:\Mes Documents\ST32\Toolbox_TP1\Libraries\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32l1xx.c
      4            * @author  MCD Application Team
      5            * @version V1.3.2
      6            * @date    10-April-2014
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32L1xx Ultra
      9            *          Low Power devices, and is generated by the clock configuration
     10            *          tool "STM32L1xx_Clock_Configuration_V1.1.0.xls".
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32l1xx_xx.s" file.
     20            *                        
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.   
     28            *      
     29            * 2. After each device reset the MSI (2.1 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32l1xx_xx.s" file, to
     31            *    configure the system clock before to branch to main program.    
     32            *    
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and MSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            * 
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32l1xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            * 
     42            * 5. This file configures the system clock as follows:  
     43            *=============================================================================
     44            *                         System Clock Configuration
     45            *=============================================================================
     46            *        System Clock source          | PLL(HSE)
     47            *-----------------------------------------------------------------------------
     48            *        SYSCLK                       | 32000000 Hz
     49            *-----------------------------------------------------------------------------
     50            *        HCLK                         | 32000000 Hz
     51            *-----------------------------------------------------------------------------
     52            *        AHB Prescaler                | 1
     53            *-----------------------------------------------------------------------------
     54            *        APB1 Prescaler               | 1
     55            *-----------------------------------------------------------------------------
     56            *        APB2 Prescaler               | 1
     57            *-----------------------------------------------------------------------------
     58            *        HSE Frequency                | 8000000 Hz
     59            *-----------------------------------------------------------------------------
     60            *        PLL DIV                      | 3
     61            *-----------------------------------------------------------------------------
     62            *        PLL MUL                      | 12
     63            *-----------------------------------------------------------------------------
     64            *        VDD                          | 3.3 V
     65            *-----------------------------------------------------------------------------
     66            *        Vcore                        | 1.8 V (Range 1)
     67            *-----------------------------------------------------------------------------
     68            *        Flash Latency                | 1 WS
     69            *-----------------------------------------------------------------------------
     70            *        SDIO clock (SDIOCLK)         | 48000000 Hz
     71            *-----------------------------------------------------------------------------
     72            *        Require 48MHz for USB clock  | Disabled
     73            *-----------------------------------------------------------------------------
     74            *=============================================================================
     75            ******************************************************************************
     76            * @attention
     77            *
     78            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     79            *
     80            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     81            * You may not use this file except in compliance with the License.
     82            * You may obtain a copy of the License at:
     83            *
     84            *        http://www.st.com/software_license_agreement_liberty_v2
     85            *
     86            * Unless required by applicable law or agreed to in writing, software 
     87            * distributed under the License is distributed on an "AS IS" BASIS, 
     88            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     89            * See the License for the specific language governing permissions and
     90            * limitations under the License.
     91            *
     92            ******************************************************************************
     93            */
     94          
     95          /** @addtogroup CMSIS
     96            * @{
     97            */
     98          
     99          /** @addtogroup stm32l1xx_system
    100            * @{
    101            */  
    102            
    103          /** @addtogroup STM32L1xx_System_Private_Includes
    104            * @{
    105            */
    106          
    107          #include "stm32l1xx.h"
    108          
    109          /**
    110            * @}
    111            */
    112          
    113          /** @addtogroup STM32L1xx_System_Private_TypesDefinitions
    114            * @{
    115            */
    116          
    117          /**
    118            * @}
    119            */
    120          
    121          /** @addtogroup STM32L1xx_System_Private_Defines
    122            * @{
    123            */
    124          
    125          /*!< Uncomment the following line if you need to use external SRAM mounted
    126               on STM32L152D_EVAL board as data memory  */
    127          /* #define DATA_IN_ExtSRAM */
    128            
    129          /*!< Uncomment the following line if you need to relocate your vector Table in
    130               Internal SRAM. */ 
    131          /* #define VECT_TAB_SRAM */
    132          #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
    133                                            This value must be a multiple of 0x200. */
    134          /**
    135            * @}
    136            */
    137          
    138          /** @addtogroup STM32L1xx_System_Private_Macros
    139            * @{
    140            */
    141          
    142          /**
    143            * @}
    144            */
    145          
    146          /** @addtogroup STM32L1xx_System_Private_Variables
    147            * @{
    148            */
    149          uint32_t SystemCoreClock    = 32000000;
    150          __I uint8_t PLLMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
    151          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    152          
    153          /**
    154            * @}
    155            */
    156          
    157          /** @addtogroup STM32L1xx_System_Private_FunctionPrototypes
    158            * @{
    159            */
    160          
    161          static void SetSysClock(void);
    162          #ifdef DATA_IN_ExtSRAM
    163            static void SystemInit_ExtMemCtl(void); 
    164          #endif /* DATA_IN_ExtSRAM */
    165          
    166          /**
    167            * @}
    168            */
    169          
    170          /** @addtogroup STM32L1xx_System_Private_Functions
    171            * @{
    172            */
    173          
    174          /**
    175            * @brief  Setup the microcontroller system.
    176            *         Initialize the Embedded Flash Interface, the PLL and update the 
    177            *         SystemCoreClock variable.
    178            * @param  None
    179            * @retval None
    180            */
    181          void SystemInit (void)
    182          {
    183            /*!< Set MSION bit */
    184            RCC->CR |= (uint32_t)0x00000100;
    185          
    186            /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
    187            RCC->CFGR &= (uint32_t)0x88FFC00C;
    188            
    189            /*!< Reset HSION, HSEON, CSSON and PLLON bits */
    190            RCC->CR &= (uint32_t)0xEEFEFFFE;
    191          
    192            /*!< Reset HSEBYP bit */
    193            RCC->CR &= (uint32_t)0xFFFBFFFF;
    194          
    195            /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
    196            RCC->CFGR &= (uint32_t)0xFF02FFFF;
    197          
    198            /*!< Disable all interrupts */
    199            RCC->CIR = 0x00000000;
    200          
    201          #ifdef DATA_IN_ExtSRAM
    202            SystemInit_ExtMemCtl(); 
    203          #endif /* DATA_IN_ExtSRAM */
    204              
    205            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    206            SetSysClock();
    207          
    208          #ifdef VECT_TAB_SRAM
    209            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
    210          #else
    211            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
    212          #endif
    213          }
    214          
    215          /**
    216            * @brief  Update SystemCoreClock according to Clock Register Values
    217            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    218            *         be used by the user application to setup the SysTick timer or configure
    219            *         other parameters.
    220            *           
    221            * @note   Each time the core clock (HCLK) changes, this function must be called
    222            *         to update SystemCoreClock variable value. Otherwise, any configuration
    223            *         based on this variable will be incorrect.         
    224            *     
    225            * @note   - The system frequency computed by this function is not the real 
    226            *           frequency in the chip. It is calculated based on the predefined 
    227            *           constant and the selected clock source:
    228            *             
    229            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
    230            *             value as defined by the MSI range.
    231            *                                   
    232            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    233            *                                              
    234            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    235            *                          
    236            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    237            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    238            *         
    239            *         (*) HSI_VALUE is a constant defined in stm32l1xx.h file (default value
    240            *             16 MHz) but the real value may vary depending on the variations
    241            *             in voltage and temperature.   
    242            *    
    243            *         (**) HSE_VALUE is a constant defined in stm32l1xx.h file (default value
    244            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    245            *              frequency of the crystal used. Otherwise, this function may
    246            *              have wrong result.
    247            *                
    248            *         - The result of this function could be not correct when using fractional
    249            *           value for HSE crystal.
    250            * @param  None
    251            * @retval None
    252            */
    253          void SystemCoreClockUpdate (void)
    254          {
    255            uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
    256          
    257            /* Get SYSCLK source -------------------------------------------------------*/
    258            tmp = RCC->CFGR & RCC_CFGR_SWS;
    259            
    260            switch (tmp)
    261            {
    262              case 0x00:  /* MSI used as system clock */
    263                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
    264                SystemCoreClock = (32768 * (1 << (msirange + 1)));
    265                break;
    266              case 0x04:  /* HSI used as system clock */
    267                SystemCoreClock = HSI_VALUE;
    268                break;
    269              case 0x08:  /* HSE used as system clock */
    270                SystemCoreClock = HSE_VALUE;
    271                break;
    272              case 0x0C:  /* PLL used as system clock */
    273                /* Get PLL clock source and multiplication factor ----------------------*/
    274                pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
    275                plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
    276                pllmul = PLLMulTable[(pllmul >> 18)];
    277                plldiv = (plldiv >> 22) + 1;
    278                
    279                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    280          
    281                if (pllsource == 0x00)
    282                {
    283                  /* HSI oscillator clock selected as PLL clock entry */
    284                  SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
    285                }
    286                else
    287                {
    288                  /* HSE selected as PLL clock entry */
    289                  SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
    290                }
    291                break;
    292              default: /* MSI used as system clock */
    293                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
    294                SystemCoreClock = (32768 * (1 << (msirange + 1)));
    295                break;
    296            }
    297            /* Compute HCLK clock frequency --------------------------------------------*/
    298            /* Get HCLK prescaler */
    299            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    300            /* HCLK clock frequency */
    301            SystemCoreClock >>= tmp;
    302          }
    303          
    304          /**
    305            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash 
    306            *         settings.
    307            * @note   This function should be called only once the RCC clock configuration  
    308            *         is reset to the default reset state (done in SystemInit() function).
    309            * @param  None
    310            * @retval None
    311            */
    312          static void SetSysClock(void)
    313          {
    314            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    315            
    316            /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
    317            /* Enable HSE */
    318            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    319           
    320            /* Wait till HSE is ready and if Time out is reached exit */
    321            do
    322            {
    323              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    324              StartUpCounter++;
    325            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    326          
    327            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    328            {
    329              HSEStatus = (uint32_t)0x01;
    330            }
    331            else
    332            {
    333              HSEStatus = (uint32_t)0x00;
    334            }
    335            
    336            if (HSEStatus == (uint32_t)0x01)
    337            {
    338              /* Enable 64-bit access */
    339              FLASH->ACR |= FLASH_ACR_ACC64;
    340              
    341              /* Enable Prefetch Buffer */
    342              FLASH->ACR |= FLASH_ACR_PRFTEN;
    343          
    344              /* Flash 1 wait state */
    345              FLASH->ACR |= FLASH_ACR_LATENCY;
    346              
    347              /* Power enable */
    348              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    349            
    350              /* Select the Voltage Range 1 (1.8 V) */
    351              PWR->CR = PWR_CR_VOS_0;
    352            
    353              /* Wait Until the Voltage Regulator is ready */
    354              while((PWR->CSR & PWR_CSR_VOSF) != RESET)
    355              {
    356              }
    357                  
    358              /* HCLK = SYSCLK /1*/
    359              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    360            
    361              /* PCLK2 = HCLK /1*/
    362              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    363              
    364              /* PCLK1 = HCLK /1*/
    365              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    366              
    367              /*  PLL configuration */
    368              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
    369                                                  RCC_CFGR_PLLDIV));
    370              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
    371          
    372              /* Enable PLL */
    373              RCC->CR |= RCC_CR_PLLON;
    374          
    375              /* Wait till PLL is ready */
    376              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    377              {
    378              }
    379                  
    380              /* Select PLL as system clock source */
    381              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    382              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
    383          
    384              /* Wait till PLL is used as system clock source */
    385              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
    386              {
    387              }
    388            }
    389            else
    390            {
    391              /* If HSE fails to start-up, the application will have wrong clock
    392                 configuration. User can add here some code to deal with this error */
    393            }
    394          }
    395          
    396          #ifdef DATA_IN_ExtSRAM
    397          /**
    398            * @brief  Setup the external memory controller.
    399            *         Called in SystemInit() function before jump to main.
    400            *         This function configures the external SRAM mounted on STM32L152D_EVAL board
    401            *         This SRAM will be used as program data memory (including heap and stack).
    402            * @param  None
    403            * @retval None
    404            */
    405          void SystemInit_ExtMemCtl(void)
    406          {
    407          /*-- GPIOs Configuration -----------------------------------------------------*/
    408          /*
    409           +-------------------+--------------------+------------------+------------------+
    410           +                       SRAM pins assignment                                   +
    411           +-------------------+--------------------+------------------+------------------+
    412           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    413           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    414           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    415           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    416           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    417           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    418           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG10<-> FSMC_NE2 |
    419           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    420           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    421           | PD13 <-> FSMC_A18 | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    422           | PD14 <-> FSMC_D0  | PE15 <-> FSMC_D12  |------------------+
    423           | PD15 <-> FSMC_D1  |--------------------+ 
    424           +-------------------+
    425          */
    426          
    427            /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    428            RCC->AHBENR   = 0x000080D8;
    429            
    430            /* Connect PDx pins to FSMC Alternate function */
    431            GPIOD->AFR[0]  = 0x00CC00CC;
    432            GPIOD->AFR[1]  = 0xCCCCCCCC;
    433            /* Configure PDx pins in Alternate function mode */  
    434            GPIOD->MODER   = 0xAAAA0A0A;
    435            /* Configure PDx pins speed to 40 MHz */  
    436            GPIOD->OSPEEDR = 0xFFFF0F0F;
    437            /* Configure PDx pins Output type to push-pull */  
    438            GPIOD->OTYPER  = 0x00000000;
    439            /* No pull-up, pull-down for PDx pins */ 
    440            GPIOD->PUPDR   = 0x00000000;
    441          
    442            /* Connect PEx pins to FSMC Alternate function */
    443            GPIOE->AFR[0]  = 0xC00000CC;
    444            GPIOE->AFR[1]  = 0xCCCCCCCC;
    445            /* Configure PEx pins in Alternate function mode */ 
    446            GPIOE->MODER   = 0xAAAA800A;
    447            /* Configure PEx pins speed to 40 MHz */ 
    448            GPIOE->OSPEEDR = 0xFFFFC00F;
    449            /* Configure PEx pins Output type to push-pull */  
    450            GPIOE->OTYPER  = 0x00000000;
    451            /* No pull-up, pull-down for PEx pins */ 
    452            GPIOE->PUPDR   = 0x00000000;
    453          
    454            /* Connect PFx pins to FSMC Alternate function */
    455            GPIOF->AFR[0]  = 0x00CCCCCC;
    456            GPIOF->AFR[1]  = 0xCCCC0000;
    457            /* Configure PFx pins in Alternate function mode */   
    458            GPIOF->MODER   = 0xAA000AAA;
    459            /* Configure PFx pins speed to 40 MHz */ 
    460            GPIOF->OSPEEDR = 0xFF000FFF;
    461            /* Configure PFx pins Output type to push-pull */  
    462            GPIOF->OTYPER  = 0x00000000;
    463            /* No pull-up, pull-down for PFx pins */ 
    464            GPIOF->PUPDR   = 0x00000000;
    465          
    466            /* Connect PGx pins to FSMC Alternate function */
    467            GPIOG->AFR[0]  = 0x00CCCCCC;
    468            GPIOG->AFR[1]  = 0x00000C00;
    469            /* Configure PGx pins in Alternate function mode */ 
    470            GPIOG->MODER   = 0x00200AAA;
    471            /* Configure PGx pins speed to 40 MHz */ 
    472            GPIOG->OSPEEDR = 0x00300FFF;
    473            /* Configure PGx pins Output type to push-pull */  
    474            GPIOG->OTYPER  = 0x00000000;
    475            /* No pull-up, pull-down for PGx pins */ 
    476            GPIOG->PUPDR   = 0x00000000;
    477            
    478          /*-- FSMC Configuration ------------------------------------------------------*/
    479            /* Enable the FSMC interface clock */
    480            RCC->AHBENR    = 0x400080D8;
    481          
    482            /* Configure and enable Bank1_SRAM3 */
    483            FSMC_Bank1->BTCR[4]  = 0x00001011;
    484            FSMC_Bank1->BTCR[5]  = 0x00000300;
    485            FSMC_Bank1E->BWTR[4] = 0x0FFFFFFF;
    486          /*
    487            Bank1_SRAM3 is configured as follow:
    488          
    489            p.FSMC_AddressSetupTime = 0;
    490            p.FSMC_AddressHoldTime = 0;
    491            p.FSMC_DataSetupTime = 3;
    492            p.FSMC_BusTurnAroundDuration = 0;
    493            p.FSMC_CLKDivision = 0;
    494            p.FSMC_DataLatency = 0;
    495            p.FSMC_AccessMode = FSMC_AccessMode_A;
    496          
    497            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
    498            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    499            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    500            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    501            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    502            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
    503            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    504            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    505            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    506            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    507            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    508            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    509            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    510            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    511            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    512          
    513            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
    514          
    515            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
    516          */
    517            
    518          }
    519          #endif /* DATA_IN_ExtSRAM */
    520          
    521          /**
    522            * @}
    523            */
    524          
    525          /**
    526            * @}
    527            */
    528          
    529          /**
    530            * @}
    531            */
    532          
    533          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
       0   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
      12  PLLMulTable
     248  SetSysClock
       4  SystemCoreClock
     198  SystemCoreClockUpdate
      82  SystemInit

 
  32 bytes in section .data
 592 bytes in section .text
 
 592 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
